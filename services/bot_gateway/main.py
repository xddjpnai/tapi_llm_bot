import os
import asyncio
import aiohttp
import uuid
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

from shared.messaging.kafka import create_producer, create_consumer
from shared.schemas import SummaryRequest, NotificationOutbound
from shared.topics import SUMMARY_REQUEST, NOTIFICATIONS_OUTBOUND, QUOTES_REQUEST, QUOTES_UPDATED, PORTFOLIO_REQUEST, NEWS_REQUEST, PORTFOLIO_UPDATED
from shared.format import tg_bold, tg_code


load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is required")

bot = Bot(TELEGRAM_BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –ö–µ—à –∏–º–µ–Ω —Å—á–µ—Ç–æ–≤ –Ω–∞ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
accounts_cache: dict[int, list[str]] = {}
# –û–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ correlation_id
pending_portfolio_updates: dict[str, asyncio.Future] = {}


main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÅ –ü–æ—Ä—Ç—Ñ–µ–ª—å"), KeyboardButton(text="üìä –°–≤–æ–¥–∫–∞")],
        [KeyboardButton(text="üíπ –ö–æ—Ç–∏—Ä–æ–≤–∫–∏"), KeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏")],
        [KeyboardButton(text="‚öô –°—á–µ—Ç–∞"), KeyboardButton(text="üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="üîë –¢–æ–∫–µ–Ω")],
    ],
    resize_keyboard=True,
)


STORAGE_URL = os.getenv("STORAGE_URL", "http://localhost:8000")
CHART_URL = os.getenv("CHART_URL", "http://localhost:8002")


@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    first = (message.from_user.first_name or "").strip()
    hello = f"–ü—Ä–∏–≤–µ—Ç, {first}!" if first else "–ü—Ä–∏–≤–µ—Ç!"
    # check token
    user_id = message.from_user.id
    user_token: str | None = None
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{STORAGE_URL}/users/{user_id}/token") as resp:
                if resp.status < 300:
                    j = await resp.json()
                    user_token = (j or {}).get("token")
        except Exception:
            pass
    if not user_token:
        link = "https://www.tbank.ru/invest/settings/api/"
        await message.answer(
            f"{hello} –ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¢–∏–Ω—å–∫–æ—Ñ—Ñ, –Ω–∞–∂–º–∏—Ç–µ ‚Äòüîë –¢–æ–∫–µ–Ω‚Äô –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω.\n–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞–∂–º–∏—Ç–µ ‚Äò‚öô –°—á–µ—Ç–∞‚Äô –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç–∞ ‚Äî –∑–∞—Ç–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n–ì–¥–µ –≤–∑—è—Ç—å —Ç–æ–∫–µ–Ω: <a href=\"{link}\">—Å—Ç—Ä–∞–Ω–∏—Ü–∞ API –¢‚Äë–±–∞–Ω–∫–∞</a>",
            reply_markup=main_kb,
        )
    else:
        await message.answer(
            f"{hello} –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç–∞ –≤ –º–µ–Ω—é ‚Äò‚öô –°—á–µ—Ç–∞‚Äô, –∑–∞—Ç–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            reply_markup=main_kb,
        )


@dp.message_handler(lambda m: m.text == "üìä –°–≤–æ–¥–∫–∞")
async def summary_request(message: types.Message):
    user_id = message.from_user.id
    # –ó–∞–ø—Ä–æ—Å–∏–º –ø–æ—Ä—Ç—Ñ–µ–ª—å —É storage API
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{STORAGE_URL}/users/{user_id}/portfolio") as resp:
            data = await resp.json()
    tickers = [p.get("ticker") for p in data.get("positions", []) if p.get("ticker") and p.get("ticker") not in {"RUB","RUB000UTSTOM"}]
    if not tickers:
        await message.answer("–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å—á–µ—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏.")
        return
    prod = await create_producer()
    try:
        req = SummaryRequest(user_id=user_id, tickers=tickers[:20]).dict()
        await prod.send_and_wait(SUMMARY_REQUEST, req)
        await message.answer("–ó–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–¥–∫—É‚Ä¶")
    finally:
        await prod.stop()


@dp.message_handler(lambda m: m.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def show_news(message: types.Message):
    user_id = message.from_user.id
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{STORAGE_URL}/users/{user_id}/portfolio") as resp:
                data = await resp.json()
        except Exception:
            data = {"positions": []}
    tickers = [p.get("ticker") for p in data.get("positions", []) if p.get("ticker") and p.get("ticker") not in {"RUB","RUB000UTSTOM"}]
    if not tickers:
        await message.answer("–ù–µ—Ç –±—É–º–∞–≥ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π.")
        return
    # –ë—ã—Å—Ç—Ä—ã–π —Ñ–æ–ª–±–µ–∫-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç
    links = []
    for t in tickers[:5]:
        g = f"https://news.google.com/search?q={t}"
        y = f"https://news.search.yahoo.com/search?p={t}"
        links.append(f"üì∞ {tg_bold(t)} ‚Äî <a href=\"{g}\">Google</a> ‚Ä¢ <a href=\"{y}\">Yahoo</a>")
    await message.answer("\n".join(links) + "\n\n–ì–æ—Ç–æ–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω—É—é –≤—ã–∂–∏–º–∫—É‚Ä¶")
    # –û—Ç–ø—Ä–∞–≤–∏–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–¥–∞—á—É –Ω–∞ LLM
    prod = await create_producer()
    try:
        corr_id = str(uuid.uuid4())
        await prod.send_and_wait(NEWS_REQUEST, {"user_id": user_id, "tickers": tickers[:20], "correlation_id": corr_id}, key=str(user_id).encode())
    finally:
        await prod.stop()


def build_accounts_kb(all_accounts: list[str], selected: set[str]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    for name in all_accounts:
        mark = "‚úÖ " if name in selected else ""
        kb.add(InlineKeyboardButton(text=f"{mark}{name}", callback_data=f"acc_toggle:{name}"))
    kb.add(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="acc_done"))
    return kb


# –ö–æ–º–∞–Ω–¥–∞ /token –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ‚Äî –æ—Å—Ç–∞–≤–∏–º –Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∫–∞–∂–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–æ –∫–Ω–æ–ø–∫—É
@dp.message_handler(commands=["token"])
async def set_token(message: types.Message):
    await message.reply("–°–µ–π—á–∞—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚Äòüîë –¢–æ–∫–µ–Ω‚Äô. –ù–∞–∂–º–∏—Ç–µ –µ—ë –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç–≤–µ—Ç–æ–º.")


@dp.message_handler(lambda m: m.text == "üîë –¢–æ–∫–µ–Ω")
async def update_token_request(message: types.Message):
    from aiogram.types import ForceReply
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π TINKOFF_API_TOKEN –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=ForceReply(selective=True))


@dp.message_handler(lambda m: m.reply_to_message and ("TINKOFF_API_TOKEN" in (m.reply_to_message.text or "") or "–¢–æ–∫–µ–Ω" in (m.reply_to_message.text or "")))
async def update_token_receive(message: types.Message):
    user_id = message.from_user.id
    token = (message.text or "").strip()
    if not token or " " in token:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫—É —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")
        return
    async with aiohttp.ClientSession() as session:
        async with session.put(f"{STORAGE_URL}/users/{user_id}/token", json={"token": token}) as resp:
            if resp.status >= 300:
                txt = await resp.text()
                await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω: {txt}")
                return
    await message.reply("–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω ‚úÖ\n–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ ‚Äò‚öô –°—á–µ—Ç–∞‚Äô –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç–∞, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –±—É–º–∞–≥–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∏.", reply_markup=main_kb)


@dp.message_handler(lambda m: m.text == "‚öô –°—á–µ—Ç–∞")
async def edit_accounts(message: types.Message):
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω –∏–∑ storage (–µ—Å–ª–∏ –µ—Å—Ç—å)
    user_token: str | None = None
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{STORAGE_URL}/users/{user_id}/token") as resp:
            if resp.status < 300:
                j = await resp.json()
                user_token = (j or {}).get("token")
    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –ø–æ–ª—É—á–∞–µ–º –∏–∑ Tinkoff (—á–µ—Ä–µ–∑ shared –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é)
    from shared.integrations.tinkoff_client import TinkoffClient
    if not user_token:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω: –Ω–∞–∂–º–∏—Ç–µ ‚Äòüîë –¢–æ–∫–µ–Ω‚Äô")
        return
    client = TinkoffClient(user_token)
    accounts = await client.get_accounts()
    names = [a.get("name") for a in accounts if a.get("name")]
    accounts_cache[user_id] = names[:]
    if not names:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ.")
        return
    # –¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –∏–∑ storage
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{STORAGE_URL}/users/{user_id}/selected_accounts") as resp:
            sel = await resp.json()
    selected = set(sel.get("accounts", []))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç–∞ (–Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)", reply_markup=build_accounts_kb(names, selected))


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("acc_toggle:"))
async def accounts_toggle(call: types.CallbackQuery):
    user_id = call.from_user.id
    name = call.data.split(":", 1)[1]
    # –ò–º—è –∫–Ω–æ–ø–∫–∏ —É–∂–µ –≤ —Ä–∞–∑–º–µ—Ç–∫–µ ‚Äî –Ω–µ –¥–µ—Ä–≥–∞–µ–º API, –±–µ—Ä–µ–º –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    names = accounts_cache.get(user_id) or []
    if not names:
        kb_rows = call.message.reply_markup.inline_keyboard if call.message.reply_markup else []
        for row in kb_rows:
            for btn in row:
                text = (btn.text or "").strip()
                if getattr(btn, "callback_data", "") == "acc_done":
                    continue
                if text.startswith("‚úÖ "):
                    text = text.replace("‚úÖ ", "", 1)
                if text:
                    names.append(text)
    if not names:
        await call.answer("–°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –ø—É—Å—Ç", show_alert=True)
        return
    # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∞ –Ω–µ –∏–∑ storage
    btns = call.message.reply_markup.inline_keyboard if call.message.reply_markup else []
    selected: set[str] = set()
    for row in btns:
        for btn in row:
            text = btn.text or ""
            if text.startswith("‚úÖ "):
                selected.add(text.replace("‚úÖ ", "", 1))
    # –ü–µ—Ä–µ–∫–ª—é—á–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ—Å—Ç—å
    if name in selected:
        selected.remove(name)
    else:
        selected.add(name)
    # –ü–µ—Ä–µ—Ä–∏—Å—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await call.message.edit_reply_markup(reply_markup=build_accounts_kb(names, selected))
    except Exception:
        pass
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == "acc_done")
async def accounts_done(call: types.CallbackQuery):
    user_id = call.from_user.id
    # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
    btns = call.message.reply_markup.inline_keyboard if call.message.reply_markup else []
    chosen: list[str] = []
    for row in btns:
        for btn in row:
            # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∞–º—É –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if getattr(btn, "callback_data", "") == "acc_done":
                continue
            text = btn.text or ""
            if text.startswith("‚úÖ "):
                chosen.append(text.replace("‚úÖ ", "", 1))
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –∫–µ—à, –≤–æ–∑—å–º–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–µ—à–∞ —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –≤ —Ä–∞–∑–º–µ—Ç–∫–µ (–Ω–∞ —Å–ª—É—á–∞–π —Å–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä–æ–∫)
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{STORAGE_URL}/users/{user_id}/selected_accounts", json={"accounts": chosen}) as resp:
            _ = await resp.text()
        # –ü–æ–ª—É—á–∏–º —Ç–æ–∫–µ–Ω
        async with session.get(f"{STORAGE_URL}/users/{user_id}/token") as resp2:
            tok_json = await resp2.json()
        # –ü–æ–ª—É—á–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–Ω–∞ —Å–ª—É—á–∞–π –≥–æ–Ω–æ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
        async with session.get(f"{STORAGE_URL}/users/{user_id}/selected_accounts") as resp3:
            saved = await resp3.json()
    accounts = saved.get("accounts", [])
    user_token = (tok_json or {}).get("token")
    if not accounts:
        await call.message.answer("–°—á–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
    else:
        if not user_token:
            await call.message.answer("–°—á–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω: –Ω–∞–∂–º–∏—Ç–µ ‚Äòüîë –¢–æ–∫–µ–Ω‚Äô.")
        else:
            prod = await create_producer()
            try:
                corr_id = str(uuid.uuid4())
                payload = {"user_id": user_id, "accounts": accounts, "correlation_id": corr_id, "token": user_token}
                print(f"[portfolio.request] user={user_id} accounts={accounts} corr={corr_id}")
                # Prepare future before sending
                fut = asyncio.get_event_loop().create_future()
                pending_portfolio_updates[corr_id] = fut
                await prod.send_and_wait(PORTFOLIO_REQUEST, payload, key=str(user_id).encode())
            finally:
                await prod.stop()
            await call.message.answer("–°—á–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Ä—Ç—Ñ–µ–ª—å‚Ä¶")
            # Wait for correlated portfolio.updated or timeout, then render current portfolio
            try:
                try:
                    await asyncio.wait_for(pending_portfolio_updates.get(corr_id), timeout=15.0)
                except Exception:
                    pass
                await render_and_send_portfolio(call.message.chat.id, user_id)
            except Exception:
                pass
            await call.answer()


async def render_and_send_portfolio(chat_id: int, user_id: int):
    try:
        # –ü–æ–ª—É—á–∏–º —Å–≤–µ–∂–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å (–ø–æ—Å–ª–µ PORTFOLIO_UPDATED –æ–Ω —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –≤ storage)
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{STORAGE_URL}/users/{user_id}/portfolio") as resp_pf:
                data_pf = await resp_pf.json()
        positions: list = data_pf.get("positions", [])

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∞–≥—Ä–µ–≥–∞—Ç—ã
        total_all_time_abs = 0.0
        total_all_time_abs_any = False
        sec_positions = []
        rub_lines = []
        for p in positions:
            t = p.get("ticker") or "?"
            fg = p.get("figi") or ""
            qty = p.get("quantity") or 0
            ey = p.get("expected_yield")
            if t in {"RUB","RUB000UTSTOM"}:
                rub_lines.append((t, fg, qty))
                continue
            try:
                if ey is not None:
                    total_all_time_abs += float(ey)
                    total_all_time_abs_any = True
            except Exception:
                pass
            sec_positions.append((t, fg, qty))

        # –ü–æ–ª—É—á–∏–º —Ç–æ–∫–µ–Ω –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Ü–µ–Ω—ã –∏ –¥–Ω–µ–≤–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É
        last_by_figi: dict[str, float] = {}
        daily_abs = None
        daily_pct = None
        current_value = None
        user_token: str | None = None
        async with aiohttp.ClientSession() as s_tok:
            async with s_tok.get(f"{STORAGE_URL}/users/{user_id}/token") as rtk:
                if rtk.status < 300:
                    tok_json = await rtk.json()
                    user_token = (tok_json or {}).get("token")
        if user_token and sec_positions:
            prev_sum = 0.0
            last_sum = 0.0
            async with aiohttp.ClientSession() as s_stats:
                for t, fg, qty in sec_positions:
                    if not fg:
                        continue
                    try:
                        async with s_stats.post(f"{CHART_URL}/chart_stats", json={"token": user_token, "ident": fg, "tf": "D1"}) as rs2:
                            if rs2.status == 200:
                                st2 = await rs2.json()
                                lv = st2.get("last")
                                pv = st2.get("prev_close")
                                if lv is not None:
                                    last_by_figi[fg] = float(lv)
                                    last_sum += float(lv) * float(qty)
                                if pv is not None:
                                    prev_sum += float(pv) * float(qty)
                    except Exception:
                        continue
            if last_sum > 0 and prev_sum > 0:
                daily_abs = round(last_sum - prev_sum, 2)
                daily_pct = round((daily_abs / prev_sum) * 100.0, 2)
                current_value = last_sum
            elif last_sum > 0:
                current_value = last_sum

        # –ò—Ç–æ–≥–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        all_time_abs = round(total_all_time_abs, 2) if total_all_time_abs_any else None
        all_time_pct = None
        if all_time_abs is not None and current_value and (current_value - all_time_abs) > 0:
            all_time_pct = round((all_time_abs / (current_value - all_time_abs)) * 100.0, 2)
        lines = []
        for t, fg, qty in sec_positions:
            price_txt = tg_code(last_by_figi.get(fg)) if fg in last_by_figi else "–Ω/–¥"
            lines.append(f"üìÅ {tg_bold(t)}\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {tg_code(qty)}\n‚Ä¢ –¶–µ–Ω–∞: {price_txt}")
        for t, fg, qty in rub_lines:
            lines.append(f"üí∞ {tg_bold('–†—É–±–ª–∏ (RUB)')}\n‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: {tg_code(qty)}")
        if lines:
            header = "–ü–æ—Ä—Ç—Ñ–µ–ª—å:"
            change_lines = ""
            if daily_abs is not None:
                change_lines += f"\n‚Ä¢ –°—É—Ç–æ—á–Ω–æ–µ –∏–∑–º.: {tg_code(daily_abs)}" + (f" ({tg_code(daily_pct)}%)" if daily_pct is not None else "")
            if all_time_abs is not None:
                change_lines += f"\n‚Ä¢ –ò–∑–º. –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {tg_code(all_time_abs)}" + (f" ({tg_code(all_time_pct)}%)" if all_time_pct is not None else "")
            kb = InlineKeyboardMarkup().add(InlineKeyboardButton(text="‚úñ –ó–∞–∫—Ä—ã—Ç—å", callback_data="delete_msg"))
            await bot.send_message(chat_id, f"{header}{change_lines}\n\n" + "\n\n".join(lines), reply_markup=kb, parse_mode="HTML")
    except Exception:
        pass


@dp.message_handler(lambda m: m.text == "üìÅ –ü–æ—Ä—Ç—Ñ–µ–ª—å")
async def show_portfolio(message: types.Message):
    user_id = message.from_user.id
    try:
        # –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{STORAGE_URL}/users/{user_id}/selected_accounts") as resp_sel:
                sel = await resp_sel.json()
            async with session.get(f"{STORAGE_URL}/users/{user_id}/token") as resp_tok:
                tok_json = await resp_tok.json()
        accounts = (sel or {}).get("accounts", [])
        user_token = (tok_json or {}).get("token")
        if accounts and user_token:
            prod = await create_producer()
            corr_id = str(uuid.uuid4())
            try:
                fut = asyncio.get_event_loop().create_future()
                pending_portfolio_updates[corr_id] = fut
                await prod.send_and_wait(PORTFOLIO_REQUEST, {"user_id": user_id, "accounts": accounts, "correlation_id": corr_id, "token": user_token}, key=str(user_id).encode())
            finally:
                await prod.stop()
            await message.answer("–û–±–Ω–æ–≤–ª—è—é –ø–æ—Ä—Ç—Ñ–µ–ª—å‚Ä¶")
            try:
                try:
                    await asyncio.wait_for(pending_portfolio_updates.get(corr_id), timeout=15.0)
                except Exception:
                    pass
                await render_and_send_portfolio(message.chat.id, user_id)
                return
            except Exception:
                pass
        # Fallback: –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞/—Å—á–µ—Ç–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await render_and_send_portfolio(message.chat.id, user_id)
    except Exception:
        await render_and_send_portfolio(message.chat.id, user_id)


def build_settings_kb(s: dict) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=3)
    daily_on = bool(s.get("daily_summary_enabled"))
    notify_quotes = bool(s.get("notify_quotes"))
    notify_news = bool(s.get("notify_news"))
    time_val = (s.get("daily_summary_time") or "09:00").strip()
    kb.add(InlineKeyboardButton(text=f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞: {'–í–∫–ª' if daily_on else '–í—ã–∫–ª'}", callback_data="settings_toggle:daily_summary_enabled"))
    for_times = ["09:00", "12:00", "18:00"]
    kb.row(*(InlineKeyboardButton(text=(("‚úÖ " if t == time_val else "") + t), callback_data=f"settings_time:{t}") for t in for_times))
    kb.row(
        InlineKeyboardButton(text=f"–ö–æ—Ç–∏—Ä–æ–≤–∫–∏: {'–í–∫–ª' if notify_quotes else '–í—ã–∫–ª'}", callback_data="settings_toggle:notify_quotes"),
        InlineKeyboardButton(text=f"–ù–æ–≤–æ—Å—Ç–∏: {'–í–∫–ª' if notify_news else '–í—ã–∫–ª'}", callback_data="settings_toggle:notify_news"),
    )
    return kb


@dp.message_handler(lambda m: m.text == "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message):
    user_id = message.from_user.id
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{STORAGE_URL}/users/{user_id}/settings") as resp:
                if resp.status >= 300:
                    txt = await resp.text()
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {txt}")
                    return
                s = await resp.json()
        kb = build_settings_kb(s)
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=kb)
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("settings_toggle:"))
async def settings_toggle(call: types.CallbackQuery):
    user_id = call.from_user.id
    field = call.data.split(":", 1)[1]
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{STORAGE_URL}/users/{user_id}/settings") as resp:
            s = await resp.json()
        new_val = not bool(s.get(field))
        await session.put(f"{STORAGE_URL}/users/{user_id}/settings", json={field: new_val})
        async with session.get(f"{STORAGE_URL}/users/{user_id}/settings") as resp2:
            s2 = await resp2.json()
    try:
        await call.message.edit_reply_markup(reply_markup=build_settings_kb(s2))
    except Exception:
        pass
    await call.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("settings_time:"))
async def settings_time(call: types.CallbackQuery):
    user_id = call.from_user.id
    time_val = call.data.split(":", 1)[1]
    async with aiohttp.ClientSession() as session:
        await session.put(f"{STORAGE_URL}/users/{user_id}/settings", json={"daily_summary_time": time_val})
        async with session.get(f"{STORAGE_URL}/users/{user_id}/settings") as resp2:
            s2 = await resp2.json()
    try:
        await call.message.edit_reply_markup(reply_markup=build_settings_kb(s2))
    except Exception:
        pass
    await call.answer()


# –£–¥–∞–ª–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è; –∫–æ–ª–ª–±–µ–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è


@dp.message_handler(lambda m: m.text == "üíπ –ö–æ—Ç–∏—Ä–æ–≤–∫–∏")
async def show_quotes(message: types.Message):
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∏–º —Ñ–∏–≥–∏—à–∫–∏ –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{STORAGE_URL}/users/{user_id}/portfolio") as resp:
            data = await resp.json()
        async with session.get(f"{STORAGE_URL}/users/{user_id}/token") as resp2:
            tok_json = await resp2.json()
    positions = data.get("positions", [])
    user_token = (tok_json or {}).get("token")
    figis = [p.get("figi") for p in positions if p.get("figi") and p.get("ticker") not in {"RUB","RUB000UTSTOM"}]
    if not figis:
        await message.answer("–ù–µ—Ç –±—É–º–∞–≥ –¥–ª—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫.")
        return
    prod = await create_producer()
    try:
        payload = {"user_id": user_id, "figis": figis, "token": user_token}
        await prod.send_and_wait(QUOTES_REQUEST, payload, key=str(user_id).encode())
        await message.answer("–ó–∞–ø—Ä–æ—Å–∏–ª –∫–æ—Ç–∏—Ä–æ–≤–∫–∏‚Ä¶")
    finally:
        await prod.stop()


async def notifications_consumer():
    cons = await create_consumer(NOTIFICATIONS_OUTBOUND, group_id="bot-gateway")
    try:
        async for msg in cons:
            data = msg.value
            try:
                payload = NotificationOutbound.parse_obj(data)
            except Exception:
                continue
            # –ø—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞
            try:
                print(f"[notif] to={payload.user_id} items={len(payload.items)}")
            except Exception:
                pass
            for item in payload.items:
                kb = InlineKeyboardMarkup().add(InlineKeyboardButton(text="‚úñ –ó–∞–∫—Ä—ã—Ç—å", callback_data="delete_msg"))
                await bot.send_message(payload.user_id, item.html, reply_markup=kb)
    finally:
        await cons.stop()


async def quotes_consumer():
    cons = await create_consumer(QUOTES_UPDATED, group_id="bot-gateway")
    try:
        async for msg in cons:
            data = msg.value or {}
            user_id = data.get("user_id")
            prices = data.get("prices", {})
            if not user_id or not prices:
                continue
            # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ç—è–Ω–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å (—á—Ç–æ–±—ã –∑–Ω–∞—Ç—å —Ç–∏–∫–µ—Ä—ã –∏ –∫–æ–ª-–≤–∞)
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{STORAGE_URL}/users/{user_id}/portfolio") as resp:
                    pf = await resp.json()
            pos = pf.get("positions", [])
            # –ü–æ–ª—É—á–∏–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            user_token: str | None = None
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{STORAGE_URL}/users/{user_id}/token") as resp:
                    if resp.status < 300:
                        tok_json = await resp.json()
                        user_token = (tok_json or {}).get("token")
            # –ü–æ –æ–¥–Ω–æ–π –±—É–º–∞–≥–µ ‚Äî –æ–¥–∏–Ω –±–ª–æ–∫: —Ç–µ–∫—Å—Ç + –≥—Ä–∞—Ñ–∏–∫ (D1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            for p in pos:
                fg = p.get("figi")
                t = p.get("ticker")
                if not fg or t in {"RUB","RUB000UTSTOM"}:
                    continue
                qty = p.get("quantity") or 0
                price = prices.get(fg)
                # –ü–æ–ª—É—á–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ TF –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (D1)
                minmax_txt = ""
                try:
                    if user_token:
                        async with aiohttp.ClientSession() as s2:
                            async with s2.post(f"{CHART_URL}/chart_stats", json={"token": user_token, "ident": fg, "tf": "D1"}) as r3:
                                if r3.status == 200:
                                    st = await r3.json()
                                    minmax_txt = f"\n‚Ä¢ –ú–∏–Ω/–ú–∞–∫—Å (D1): {tg_code(st.get('min'))} / {tg_code(st.get('max'))}"
                except Exception:
                    pass
                price_txt = "–Ω/–¥" if price is None else tg_code(price)
                caption = f"üíπ {tg_bold(t)}\n‚Ä¢ –ö–æ–ª-–≤–æ: {tg_code(qty)}\n‚Ä¢ –¶–µ–Ω–∞: {price_txt}{minmax_txt}"
                kb = InlineKeyboardMarkup().row(
                    InlineKeyboardButton(text="M5", callback_data=f"chart:{fg}:M5"),
                    InlineKeyboardButton(text="H1", callback_data=f"chart:{fg}:H1"),
                    InlineKeyboardButton(text="D1", callback_data=f"chart:{fg}:D1"),
                ).add(InlineKeyboardButton(text="‚úñ –ó–∞–∫—Ä—ã—Ç—å", callback_data="delete_msg"))
                if user_token:
                    try:
                        async with aiohttp.ClientSession() as s2:
                            async with s2.post(f"{CHART_URL}/chart", json={"token": user_token, "ident": fg, "tf": "D1"}) as r2:
                                if r2.status == 200:
                                    img = await r2.read()
                                    await bot.send_photo(user_id, img, caption=caption, reply_markup=kb, parse_mode="HTML")
                                else:
                                    await bot.send_message(user_id, caption, reply_markup=kb, parse_mode="HTML")
                    except Exception:
                        await bot.send_message(user_id, caption, reply_markup=kb, parse_mode="HTML")
                else:
                    await bot.send_message(user_id, caption, reply_markup=kb, parse_mode="HTML")
    finally:
        await cons.stop()


async def portfolio_updated_consumer():
    cons = await create_consumer(PORTFOLIO_UPDATED, group_id="bot-gateway")
    try:
        async for msg in cons:
            data = msg.value or {}
            corr_id = data.get("correlation_id")
            if not corr_id:
                continue
            fut = pending_portfolio_updates.pop(corr_id, None)
            if fut and not fut.done():
                try:
                    fut.set_result(True)
                except Exception:
                    pass
    finally:
        await cons.stop()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("chart:"))
async def chart_handler(call: types.CallbackQuery):
    try:
        _, ident, tf = call.data.split(":", 2)
    except ValueError:
        await call.answer()
        return
    user_id = call.from_user.id
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{STORAGE_URL}/users/{user_id}/token") as resp:
            tok_json = await resp.json()
    user_token = (tok_json or {}).get("token")
    if not user_token:
        await call.answer("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞. –û–±–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚Äòüîë –¢–æ–∫–µ–Ω‚Äô", show_alert=True)
        return
    try:
        async with aiohttp.ClientSession() as s2:
            async with s2.post(f"{CHART_URL}/chart", json={"token": user_token, "ident": ident, "tf": tf}) as r2:
                if r2.status != 200:
                    await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", show_alert=True)
                    return
                content = await r2.read()
        kb = InlineKeyboardMarkup().row(
            InlineKeyboardButton(text="M5", callback_data=f"chart:{ident}:M5"),
            InlineKeyboardButton(text="H1", callback_data=f"chart:{ident}:H1"),
            InlineKeyboardButton(text="D1", callback_data=f"chart:{ident}:D1"),
        ).add(InlineKeyboardButton(text="‚úñ –ó–∞–∫—Ä—ã—Ç—å", callback_data="delete_msg"))
        # –°–æ–±–µ—Ä–µ–º –ø–æ–¥–ø–∏—Å—å: –¢–∏–∫–µ—Ä, –ö–æ–ª-–≤–æ, –¶–µ–Ω–∞ (last –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ TF), –ú–∏–Ω/–ú–∞–∫—Å (TF)
        caption = ""
        try:
            t = "?"
            qty = 0
            # —Ç—è–Ω–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–∏–∫–µ—Ä –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ FIGI
            async with aiohttp.ClientSession() as s_info:
                async with s_info.get(f"{STORAGE_URL}/users/{user_id}/portfolio") as rpf:
                    pf = await rpf.json()
            for p in pf.get("positions", []):
                if p.get("figi") == ident:
                    t = p.get("ticker") or t
                    qty = p.get("quantity") or 0
                    break
            last_val = None
            tf_min = None
            tf_max = None
            async with aiohttp.ClientSession() as s3:
                # –ë–µ—Ä–µ–º last/min/max –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ TF
                try:
                    async with s3.post(f"{CHART_URL}/chart_stats", json={"token": user_token, "ident": ident, "tf": tf}) as r_stats:
                        if r_stats.status == 200:
                            st = await r_stats.json()
                            last_val = st.get("last")
                            tf_min = st.get("min")
                            tf_max = st.get("max")
                except Exception:
                    pass
            price_txt = "–Ω/–¥" if last_val is None else tg_code(last_val)
            minmax_part = "" if tf_min is None or tf_max is None else f"\n‚Ä¢ –ú–∏–Ω/–ú–∞–∫—Å ({tf}): {tg_code(tf_min)} / {tg_code(tf_max)}"
            caption = f"üíπ {tg_bold(t)}\n‚Ä¢ –ö–æ–ª-–≤–æ: {tg_code(qty)}\n‚Ä¢ –¶–µ–Ω–∞: {price_txt}{minmax_part}"
        except Exception:
            caption = ""
        await bot.send_photo(call.message.chat.id, content, caption=caption, reply_markup=kb, parse_mode="HTML")
    except Exception:
        await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫")
    finally:
        await call.answer()


@dp.callback_query_handler(lambda c: c.data == "delete_msg")
async def delete_message(call: types.CallbackQuery):
    try:
        await call.message.delete()
    except Exception:
        try:
            await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", show_alert=True)
        except Exception:
            pass
    else:
        try:
            await call.answer()
        except Exception:
            pass


def main():
    from aiogram import executor

    async def on_startup(_dp):
        loop = asyncio.get_event_loop()
        loop.create_task(notifications_consumer())
        loop.create_task(quotes_consumer())
        loop.create_task(portfolio_updated_consumer())

    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)


if __name__ == "__main__":
    main()


